[
  {
    "Type": "theory",
    "Title": "Wprowadzenie do sortowania bąbelkowego",
    "Content": "# Sortowanie bąbelkowe\n\nSortowanie bąbelkowe to algorytm, który:\n- Porównuje sąsiednie elementy\n- Zamienia je miejscami, jeśli są w złej kolejności\n- Powtarza proces aż lista będzie posortowana\n\n## Kluczowe cechy:\n- Prosty w implementacji\n- Efektywny dla małych zbiorów danych\n- Złożoność czasowa: O(n²)\n- Złożoność pamięciowa: O(1)\n\n## Przykład wizualny:\n[5, 3, 8, 1] → [3, 5, 1, 8] → [3, 1, 5, 8] → [1, 3, 5, 8]",
    "Order": 1,
    "LessonId": 1
  },
  {
    "Type": "visualization",
    "Title": "Animowana demonstracja",
    "Content": "Obserwuj, jak działa sortowanie bąbelkowe na przykładowej tablicy:",
    "Order": 2,
    "LessonId": 1,
    "AdditionalData": {
      "array": [ 5, 2, 9, 1, 5 ],
      "steps": [
        {
          "array": [ 2, 5, 9, 1, 5 ],
          "comparing": [ 0, 1 ]
        },
        {
          "array": [ 2, 5, 1, 9, 5 ],
          "comparing": [ 2, 3 ]
        },
        {
          "array": [ 2, 5, 1, 5, 9 ],
          "comparing": [ 3, 4 ]
        },
        {
          "array": [ 2, 1, 5, 5, 9 ],
          "comparing": [ 1, 2 ]
        },
        {
          "array": [ 1, 2, 5, 5, 9 ],
          "comparing": [ 0, 1 ]
        }
      ],
      "speed": "1000"
    }
  },
  {
    "Type": "interactive",
    "Title": "Krok po kroku przez algorytm",
    "Content": "Przejdź przez kolejne kroki sortowania bąbelkowego, wybierając które elementy należy zamienić miejscami.",
    "Order": 3,
    "LessonId": 1,
    "AdditionalData": {
      "initialArray": [ 4, 2, 7, 1, 3 ],
      "steps": [
        {
          "question": "Które elementy należy zamienić w pierwszym porównaniu?",
          "currentArray": [ 4, 2, 7, 1, 3 ],
          "comparing": [ 0, 1 ],
          "correctSwap": true
        },
        {
          "question": "Czy należy zamienić te elementy?",
          "currentArray": [ 2, 4, 7, 1, 3 ],
          "comparing": [ 1, 2 ],
          "correctSwap": false
        },
        {
          "question": "Czy należy zamienić te elementy?",
          "currentArray": [ 2, 4, 7, 1, 3 ],
          "comparing": [ 2, 3 ],
          "correctSwap": true
        },
        {
          "question": "Czy należy zamienić te elementy?",
          "currentArray": [ 2, 4, 1, 7, 3 ],
          "comparing": [ 3, 4 ],
          "correctSwap": true
        },
        {
          "question": "Czy należy zamienić te elementy? (Drugi przebieg)",
          "currentArray": [ 2, 4, 1, 3, 7 ],
          "comparing": [ 0, 1 ],
          "correctSwap": false
        }
      ]
    }
  },
  {
    "Type": "quiz",
    "Title": "Zrozumienie działania",
    "Order": 4,
    "LessonId": 1,
    "AdditionalData": {
      "question": "Co będzie wynikiem pierwszego pełnego przebiegu sortowania bąbelkowego dla tablicy [5, 3, 8, 1]?",
      "options": [
        {
          "id": "a",
          "text": "[3, 5, 1, 8]",
          "correct": true
        },
        {
          "id": "b",
          "text": "[1, 3, 5, 8]"
        },
        {
          "id": "c",
          "text": "[5, 1, 3, 8]"
        }
      ],
      "explanation": "W pierwszym przebiegu największy element (8) 'wypływa' na koniec tablicy, a pozostałe elementy są częściowo uporządkowane."
    }
  },
  {
    "Type": "challenge",
    "Title": "Mini-implementacja",
    "Content": "Zaimplementuj funkcję do jednego przebiegu sortowania bąbelkowego.",
    "Order": 5,
    "LessonId": 1,
    "AdditionalData": {
      "initialCode": "function bubblePass(arr) {\n  // Wykonaj jeden przebieg sortowania bąbelkowego\n  // Zwróć zmodyfikowaną tablicę\n  \n  \n  \n  return arr;\n}",
      "testCases": [
        {
          "id": "1",
          "input": "[5,3,8,1]",
          "expectedOutput": "[3,5,1,8]",
          "description": "Pierwszy przebieg sortowania"
        },
        {
          "id": "2",
          "input": "[9,8,7,6]",
          "expectedOutput": "[8,7,6,9]",
          "description": "Elementy w odwrotnej kolejności"
        },
        {
          "id": "3",
          "input": "[1,2,3,4]",
          "expectedOutput": "[1,2,3,4]",
          "description": "Już posortowana tablica"
        },
        {
          "id": "4",
          "input": "[5,1,5,2]",
          "expectedOutput": "[1,5,2,5]",
          "description": "Tablica z duplikatami"
        }
      ],
      "hint": "Porównuj sąsiednie elementy i zamieniaj je jeśli są w złej kolejności.",
      "solution": "function bubblePass(arr) {\n  // Tworzymy kopię tablicy\n  const result = [...arr];\n  \n  // Wykonujemy jeden przebieg sortowania\n  for (let i = 0; i < result.length - 1; i++) {\n    // Porównujemy sąsiednie elementy\n    if (result[i] > result[i + 1]) {\n      // Zamiana elementów miejscami\n      [result[i], result[i + 1]] = [result[i + 1], result[i]];\n    }\n  }\n  \n  return result;\n}"
    }
  },
  {
    "Type": "coding",
    "Title": "Pełna implementacja",
    "Content": "Zaimplementuj pełny algorytm sortowania bąbelkowego z optymalizacją zatrzymującą sortowanie, gdy tablica jest już posortowana.",
    "Order": 6,
    "LessonId": 1,
    "AdditionalData": {
      "initialCode": "function bubbleSort(arr) {\n  // Zaimplementuj sortowanie bąbelkowe\n  // Dodaj optymalizację sprawdzającą czy tablica jest już posortowana\n  \n  \n  \n  return arr;\n}",
      "testCases": [
        {
          "id": "1",
          "input": "[5,1,4,2,3]",
          "expectedOutput": "[1,2,3,4,5]",
          "description": "Przypadek standardowy"
        },
        {
          "id": "2",
          "input": "[1,2,3,4,5]",
          "expectedOutput": "[1,2,3,4,5]",
          "description": "Tablica już posortowana (test optymalizacji)"
        },
        {
          "id": "3",
          "input": "[5,4,3,2,1]",
          "expectedOutput": "[1,2,3,4,5]",
          "description": "Najgorszy przypadek"
        },
        {
          "id": "4",
          "input": "[3,3,3,1,4]",
          "expectedOutput": "[1,3,3,3,4]",
          "description": "Tablica z duplikatami"
        },
        {
          "id": "5",
          "input": "[]",
          "expectedOutput": "[]",
          "description": "Pusta tablica"
        }
      ],
      "hint": "Użyj flagi swapped do sprawdzenia czy w danym przebiegu wykonano jakieś zamiany.",
      "solution": "function bubbleSort(arr) {\n  // Tworzymy kopię tablicy\n  const result = [...arr];\n  let swapped;\n  \n  do {\n    swapped = false;\n    \n    for (let i = 0; i < result.length - 1; i++) {\n      if (result[i] > result[i + 1]) {\n        // Zamiana elementów miejscami\n        [result[i], result[i + 1]] = [result[i + 1], result[i]];\n        swapped = true;\n      }\n    }\n  } while (swapped);\n  \n  return result;\n}"
    }
  },
  {
    "Type": "theory",
    "Title": "Analiza złożoności",
    "Content": "## Złożoność sortowania bąbelkowego\n\n### Złożoność czasowa:\n- Najlepszy przypadek: O(n) - tablica już posortowana\n- Średni przypadek: O(n²)\n- Najgorszy przypadek: O(n²)\n\n### Zalety:\n- Prosty w implementacji\n- Stabilny (zachowuje kolejność równych elementów)\n- Małe zużycie pamięci\n\n### Wady:\n- Nieefektywny dla dużych zbiorów danych\n- Zawsze wykonuje O(n²) porównań\n\n### Kiedy używać?\n- Małe zbiory danych\n- Nauczanie algorytmów\n- Gdy ważna jest prostota implementacji",
    "Order": 7,
    "LessonId": 1
  },
  {
    "Type": "quiz",
    "Title": "Test końcowy",
    "Order": 8,
    "LessonId": 1,
    "AdditionalData": {
      "questions": [
        {
          "question": "Jaka jest złożoność pamięciowa sortowania bąbelkowego?",
          "options": [
            {
              "id": "a",
              "text": "O(1)",
              "correct": true
            },
            {
              "id": "b",
              "text": "O(n)"
            },
            {
              "id": "c",
              "text": "O(n²)"
            }
          ],
          "explanation": "Sortowanie bąbelkowe wymaga tylko jednej zmiennej pomocniczej do zamiany elementów."
        },
        {
          "question": "Która optymalizacja może znacząco przyspieszyć sortowanie bąbelkowe?",
          "options": [
            {
              "id": "a",
              "text": "Sprawdzanie czy tablica jest już posortowana",
              "correct": true
            },
            {
              "id": "b",
              "text": "Sortowanie od końca tablicy"
            },
            {
              "id": "c",
              "text": "Sortowanie co drugi element"
            }
          ],
          "explanation": "Zatrzymanie sortowania gdy nie wykonano żadnych zamian w przebiegu oznacza, że tablica jest już posortowana."
        }
      ]
    }
  },
  {
    "Type": "challenge",
    "Title": "Implementacja sortowania przez wybieranie",
    "Content": "Zaimplementuj algorytm sortowania przez wybieranie (selection sort). Sortowanie przez wybieranie polega na znajdowaniu najmniejszego elementu i umieszczaniu go na początku tablicy.",
    "Order": 9,
    "LessonId": 1,
    "AdditionalData": {
      "initialCode": "function selectionSort(arr) {\n  // Zaimplementuj sortowanie przez wybieranie\n  // Znajdź najmniejszy element i przenieś go na początek\n  \n  \n  \n  return arr;\n}",
      "testCases": [
        {
          "id": "1",
          "input": "[5,3,6,2,10]",
          "expectedOutput": "[2,3,5,6,10]",
          "description": "Podstawowy przypadek"
        },
        {
          "id": "2",
          "input": "[64,25,12,22,11]",
          "expectedOutput": "[11,12,22,25,64]",
          "description": "Różnorodne elementy"
        },
        {
          "id": "3",
          "input": "[1,2,3,4,5]",
          "expectedOutput": "[1,2,3,4,5]",
          "description": "Już posortowana tablica"
        },
        {
          "id": "4",
          "input": "[5,5,5,2,2]",
          "expectedOutput": "[2,2,5,5,5]",
          "description": "Tablica z duplikatami"
        },
        {
          "id": "5",
          "input": "[]",
          "expectedOutput": "[]",
          "description": "Pusta tablica"
        }
      ],
      "hint": "W sortowaniu przez wybieranie, w każdej iteracji znajdź indeks najmniejszego elementu w nieposortowanej części tablicy, a następnie zamień go z elementem na początku nieposortowanej części.",
      "solution": "function selectionSort(arr) {\n  const result = [...arr];\n  const len = result.length;\n  \n  for (let i = 0; i < len - 1; i++) {\n    // Znajdź minimum w nieposortowanej części\n    let minIndex = i;\n    \n    for (let j = i + 1; j < len; j++) {\n      if (result[j] < result[minIndex]) {\n        minIndex = j;\n      }\n    }\n    \n    // Zamień znalezione minimum z pierwszym elementem\n    if (minIndex !== i) {\n      [result[i], result[minIndex]] = [result[minIndex], result[i]];\n    }\n  }\n  \n  return result;\n}"
    }
  },
  {
    "Type": "challenge",
    "Title": "Implementacja sortowania przez wstawianie",
    "Content": "Zaimplementuj algorytm sortowania przez wstawianie (insertion sort). Sortowanie przez wstawianie działa podobnie do sortowania kart w ręce - bierzemy kolejne elementy i wstawiamy je na odpowiednie miejsce wśród już posortowanych.",
    "Order": 10,
    "LessonId": 1,
    "AdditionalData": {
      "initialCode": "function insertionSort(arr) {\n  // Zaimplementuj sortowanie przez wstawianie\n  // Przenieś każdy element na odpowiednią pozycję\n  \n  \n  \n  return arr;\n}",
      "testCases": [
        {
          "id": "1",
          "input": "[5,2,4,6,1,3]",
          "expectedOutput": "[1,2,3,4,5,6]",
          "description": "Podstawowy przypadek"
        },
        {
          "id": "2",
          "input": "[31,41,59,26,41,58]",
          "expectedOutput": "[26,31,41,41,58,59]",
          "description": "Przypadek z duplikatami"
        },
        {
          "id": "3",
          "input": "[1,2,3,4,5]",
          "expectedOutput": "[1,2,3,4,5]",
          "description": "Już posortowana tablica"
        },
        {
          "id": "4",
          "input": "[5,4,3,2,1]",
          "expectedOutput": "[1,2,3,4,5]",
          "description": "Odwrotnie posortowana tablica"
        },
        {
          "id": "5",
          "input": "[]",
          "expectedOutput": "[]",
          "description": "Pusta tablica"
        }
      ],
      "hint": "W sortowaniu przez wstawianie, przeglądamy tablicę od drugiego elementu i każdy element wstawiamy na odpowiednią pozycję wśród wcześniejszych, już posortowanych elementów.",
      "solution": "function insertionSort(arr) {\n  const result = [...arr];\n  \n  for (let i = 1; i < result.length; i++) {\n    // Zapamiętaj bieżący element do wstawienia\n    const currentElement = result[i];\n    \n    // Znajdź pozycję, na którą trzeba wstawić element\n    let j = i - 1;\n    while (j >= 0 && result[j] > currentElement) {\n      result[j + 1] = result[j]; // Przesuń element w prawo\n      j--;\n    }\n    \n    // Wstaw element na właściwą pozycję\n    result[j + 1] = currentElement;\n  }\n  \n  return result;\n}"
    }
  },
  {
    "Type": "coding",
    "Title": "Funkcja sprawdzająca, czy tablica jest posortowana",
    "Content": "Zaimplementuj funkcję, która sprawdza, czy tablica jest posortowana (rosnąco). Funkcja powinna zwracać true, jeśli tablica jest posortowana, a false w przeciwnym przypadku.",
    "Order": 11,
    "LessonId": 1,
    "AdditionalData": {
      "initialCode": "function isSorted(arr) {\n  // Sprawdź, czy tablica jest posortowana rosnąco\n  \n  \n  \n  return true;\n}",
      "testCases": [
        {
          "id": "1",
          "input": "[1,2,3,4,5]",
          "expectedOutput": "true",
          "description": "Posortowana tablica"
        },
        {
          "id": "2",
          "input": "[5,4,3,2,1]",
          "expectedOutput": "false",
          "description": "Odwrotnie posortowana tablica"
        },
        {
          "id": "3",
          "input": "[1,2,5,4,6]",
          "expectedOutput": "false",
          "description": "Częściowo posortowana tablica"
        },
        {
          "id": "4",
          "input": "[1,1,2,3,3]",
          "expectedOutput": "true",
          "description": "Posortowana tablica z duplikatami"
        },
        {
          "id": "5",
          "input": "[]",
          "expectedOutput": "true",
          "description": "Pusta tablica (uznajemy za posortowaną)"
        },
        {
          "id": "6",
          "input": "[1]",
          "expectedOutput": "true",
          "description": "Tablica z jednym elementem"
        }
      ],
      "hint": "Przejdź przez tablicę i sprawdź, czy każdy element jest mniejszy lub równy od następnego.",
      "solution": "function isSorted(arr) {\n  // Pusta tablica lub tablica z jednym elementem są posortowane\n  if (arr.length <= 1) {\n    return true;\n  }\n  \n  // Sprawdź, czy każdy element jest mniejszy lub równy następnemu\n  for (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i] > arr[i + 1]) {\n      return false;\n    }\n  }\n  \n  return true;\n}"
    }
  },
  {
    "Type": "challenge",
    "Title": "Znajdowanie indeksu najmniejszego elementu",
    "Content": "Zaimplementuj funkcję, która znajduje indeks najmniejszego elementu w tablicy. Ta funkcja jest kluczowym krokiem w algorytmie sortowania przez wybieranie.",
    "Order": 12,
    "LessonId": 1,
    "AdditionalData": {
      "initialCode": "function findMinIndex(arr, startIndex = 0) {\n  // Znajdź indeks najmniejszego elementu w tablicy\n  // zaczynając od indeksu startIndex\n  \n  \n  \n  return 0;\n}",
      "testCases": [
        {
          "id": "1",
          "input": "[[5,3,6,2,10], 0]",
          "expectedOutput": "3",
          "description": "Najmniejszy element w środku tablicy"
        },
        {
          "id": "2",
          "input": "[[1,2,3,4,5], 0]",
          "expectedOutput": "0",
          "description": "Najmniejszy element na początku"
        },
        {
          "id": "3",
          "input": "[[5,4,3,2,1], 0]",
          "expectedOutput": "4",
          "description": "Najmniejszy element na końcu"
        },
        {
          "id": "4",
          "input": "[[5,3,6,2,10], 2]",
          "expectedOutput": "3",
          "description": "Szukanie od środka tablicy"
        },
        {
          "id": "5",
          "input": "[[3,3,3,3,3], 0]",
          "expectedOutput": "0",
          "description": "Wszystkie elementy równe"
        }
      ],
      "hint": "Zacznij od założenia, że element na startIndex jest najmniejszy, a następnie przejdź przez resztę tablicy, aktualizując minimalny indeks, gdy znajdziesz mniejszy element.",
      "solution": "function findMinIndex(arr, startIndex = 0) {\n  // Sprawdź, czy tablica jest niepusta\n  if (arr.length === 0) {\n    return -1; // Zwróć -1 dla pustej tablicy\n  }\n  \n  // Zainicjuj minimalny indeks jako startIndex\n  let minIndex = startIndex;\n  \n  // Przejdź przez pozostałe elementy, zaczynając od startIndex + 1\n  for (let i = startIndex + 1; i < arr.length; i++) {\n    if (arr[i] < arr[minIndex]) {\n      minIndex = i;\n    }\n  }\n  \n  return minIndex;\n}"
    }
  }
]